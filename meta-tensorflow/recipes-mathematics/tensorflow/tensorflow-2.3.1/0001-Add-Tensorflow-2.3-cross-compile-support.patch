From 95175ded7047d0004119e49aabbe7b033d803907 Mon Sep 17 00:00:00 2001
From: Gareth Williams <gareth.williams.jx@renesas.com>
Date: Mon, 30 Nov 2020 13:12:09 +0000
Subject: [PATCH] Add Tensorflow 2.3 cross-compile support

Add support for the gcc cross compiler provided in the associated sysroot within
the yocto working directory.

Signed-off-by: Gareth Williams <gareth.williams.jx@renesas.com>
---
 WORKSPACE                                          |   6 +
 tensorflow/workspace.bzl                           |   8 +
 third_party/repo.bzl                               |   1 +
 third_party/toolchains/yocto/BUILD                 | 155 ++++++
 .../toolchains/yocto/cc_toolchain_config.bzl       | 619 +++++++++++++++++++++
 third_party/toolchains/yocto/yocto_compiler.BUILD  |  70 +++
 .../toolchains/yocto/yocto_compiler_configure.bzl  |  24 +
 7 files changed, 883 insertions(+)
 create mode 100644 third_party/toolchains/yocto/BUILD
 create mode 100644 third_party/toolchains/yocto/cc_toolchain_config.bzl
 create mode 100644 third_party/toolchains/yocto/yocto_compiler.BUILD
 create mode 100644 third_party/toolchains/yocto/yocto_compiler_configure.bzl

diff --git a/WORKSPACE b/WORKSPACE
index ea741c3..396c1ba 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -64,6 +64,12 @@ android_configure(name="local_config_android")
 load("@local_config_android//:android.bzl", "android_workspace")
 android_workspace()
 
+new_local_repository(
+    name = "yocto_compiler",
+    path = "%%WORKDIR%%",
+    build_file = "//third_party/toolchains/yocto:yocto_compiler.BUILD",
+)
+
 # If a target is bound twice, the later one wins, so we have to do tf bindings
 # at the end of the WORKSPACE file.
 load("//tensorflow:workspace.bzl", "tf_bind")
diff --git a/tensorflow/workspace.bzl b/tensorflow/workspace.bzl
index c961543..dc11095 100755
--- a/tensorflow/workspace.bzl
+++ b/tensorflow/workspace.bzl
@@ -12,6 +12,7 @@ load("//third_party/systemlibs:syslibs_configure.bzl", "syslibs_configure")
 load("//third_party/toolchains/remote:configure.bzl", "remote_execution_configure")
 load("//third_party/toolchains/clang6:repo.bzl", "clang6_configure")
 load("//third_party/toolchains/cpus/arm:arm_compiler_configure.bzl", "arm_compiler_configure")
+load("//third_party/toolchains/yocto:yocto_compiler_configure.bzl", "yocto_compiler_configure")
 load("//third_party/toolchains/embedded/arm-linux:arm_linux_toolchain_configure.bzl", "arm_linux_toolchain_configure")
 load("//third_party:repo.bzl", "tf_http_archive")
 load("//third_party/clang_toolchain:cc_configure_clang.bzl", "cc_download_clang_toolchain")
@@ -119,6 +120,13 @@ def tf_repositories(path_prefix = "", tf_repo_name = ""):
         remote_config_repo_aarch64 = "../aarch64_compiler",
     )
 
+    # Point //external/local_config_yocto_compiler to //external/yocto_compiler
+    yocto_compiler_configure(
+        name = "local_config_yocto_compiler",
+        build_file = clean_dep("//third_party/toolchains/yocto:BUILD"),
+        remote_config_repo = "../yocto_compiler",
+    )
+
     # TFLite crossbuild toolchain for embeddeds Linux
     arm_linux_toolchain_configure(
         name = "local_config_embedded_arm",
diff --git a/third_party/repo.bzl b/third_party/repo.bzl
index a4d2b89..fd4f753 100644
--- a/third_party/repo.bzl
+++ b/third_party/repo.bzl
@@ -16,6 +16,7 @@
 
 _SINGLE_URL_WHITELIST = depset([
     "arm_compiler",
+    "yocto_compiler",
 ])
 
 def _is_windows(ctx):
diff --git a/third_party/toolchains/yocto/BUILD b/third_party/toolchains/yocto/BUILD
new file mode 100644
index 0000000..bc1e455
--- /dev/null
+++ b/third_party/toolchains/yocto/BUILD
@@ -0,0 +1,155 @@
+load(":cc_toolchain_config.bzl", "cc_toolchain_config")
+
+package(default_visibility = ["//visibility:public"])
+
+cc_toolchain_suite(
+    name = "yocto_toolchain",
+    toolchains = {
+       "armeabi-v7a-a7": ":cc-compiler-armeabi-v7a-a7",
+       "armeabi-v7a-a15": ":cc-compiler-armeabi-v7a-a15",
+       "armeabi-v7a-a7-a15": ":cc-compiler-armeabi-v7a-a7-a15",
+       "arm64-v8a-a53": ":cc-compiler-arm64-v8a-a53",
+       "arm64-v8a-a57": ":cc-compiler-arm64-v8a-a57",
+       "arm64-v8a-a57-a53": ":cc-compiler-arm64-v8a-a57-a53",
+       "local|compiler": ":cc-compiler-local",
+       "k8": ":cc-compiler-local",
+    },
+)
+
+cc_toolchain_config(
+    name = "yocto_toolchain_config_armeabi-v7a-a15",
+    cpu = "armeabi-v7a-a15",
+)
+
+cc_toolchain_config(
+    name = "yocto_toolchain_config_armeabi-v7a-a7",
+    cpu = "armeabi-v7a-a7",
+)
+
+cc_toolchain_config(
+    name = "yocto_toolchain_config_armeabi-v7a-a7-a15",
+    cpu = "armeabi-v7a-a7-a15",
+)
+
+cc_toolchain_config(
+    name = "yocto_toolchain_config_arm64-v8a-a53",
+    cpu = "arm64-v8a-a53",
+)
+
+cc_toolchain_config(
+    name = "yocto_toolchain_config_arm64-v8a-a57",
+    cpu = "arm64-v8a-a57",
+)
+
+cc_toolchain_config(
+    name = "yocto_toolchain_config_arm64-v8a-a57-a53",
+    cpu = "arm64-v8a-a57-a53",
+)
+
+cc_toolchain_config(
+    name = "yocto_local_toolchain_config",
+    cpu = "local",
+)
+
+filegroup(
+    name = "empty",
+    srcs = [],
+)
+
+filegroup(
+    name = "arm_linux_all_files",
+    srcs = [
+        "@yocto_compiler//:compiler_pieces",
+    ],
+)
+
+cc_toolchain(
+    name = "cc-compiler-armeabi-v7a-a15",
+    toolchain_config = ":yocto_toolchain_config_armeabi-v7a-a15",
+    toolchain_identifier = "yocto_toolchain_config_armeabi-v7a-a15",
+    all_files = ":arm_linux_all_files",
+    compiler_files = ":arm_linux_all_files",
+    dwp_files = ":empty",
+    linker_files = ":arm_linux_all_files",
+    objcopy_files = ":arm_linux_all_files",
+    strip_files = ":arm_linux_all_files",
+    supports_param_files = 1,
+)
+
+cc_toolchain(
+    name = "cc-compiler-armeabi-v7a-a7",
+    toolchain_config = ":yocto_toolchain_config_armeabi-v7a-a7",
+    toolchain_identifier = "yocto_toolchain_config_armeabi-v7a-a7",
+    all_files = ":arm_linux_all_files",
+    compiler_files = ":arm_linux_all_files",
+    dwp_files = ":empty",
+    linker_files = ":arm_linux_all_files",
+    objcopy_files = ":arm_linux_all_files",
+    strip_files = ":arm_linux_all_files",
+    supports_param_files = 1,
+)
+
+cc_toolchain(
+    name = "cc-compiler-armeabi-v7a-a7-a15",
+    toolchain_config = ":yocto_toolchain_config_armeabi-v7a-a7-a15",
+    toolchain_identifier = "yocto_toolchain_config_armeabi-v7a-a7-a15",
+    all_files = ":arm_linux_all_files",
+    compiler_files = ":arm_linux_all_files",
+    dwp_files = ":empty",
+    linker_files = ":arm_linux_all_files",
+    objcopy_files = ":arm_linux_all_files",
+    strip_files = ":arm_linux_all_files",
+    supports_param_files = 1,
+)
+
+cc_toolchain(
+    name = "cc-compiler-arm64-v8a-a53",
+    toolchain_config = ":yocto_toolchain_config_arm64-v8a-a53",
+    toolchain_identifier = "yocto_toolchain_config_arm64-v8a-a53",
+    all_files = ":arm_linux_all_files",
+    compiler_files = ":arm_linux_all_files",
+    dwp_files = ":empty",
+    linker_files = ":arm_linux_all_files",
+    objcopy_files = ":arm_linux_all_files",
+    strip_files = ":arm_linux_all_files",
+    supports_param_files = 1,
+)
+
+cc_toolchain(
+    name = "cc-compiler-arm64-v8a-a57",
+    toolchain_config = ":yocto_toolchain_config_arm64-v8a-a57",
+    toolchain_identifier = "yocto_toolchain_config_arm64-v8a-a57",
+    all_files = ":arm_linux_all_files",
+    compiler_files = ":arm_linux_all_files",
+    dwp_files = ":empty",
+    linker_files = ":arm_linux_all_files",
+    objcopy_files = ":arm_linux_all_files",
+    strip_files = ":arm_linux_all_files",
+    supports_param_files = 1,
+)
+
+cc_toolchain(
+    name = "cc-compiler-arm64-v8a-a57-a53",
+    toolchain_config = ":yocto_toolchain_config_arm64-v8a-a57-a53",
+    toolchain_identifier = "yocto_toolchain_config_arm64-v8a-a57-a53",
+    all_files = ":arm_linux_all_files",
+    compiler_files = ":arm_linux_all_files",
+    dwp_files = ":empty",
+    linker_files = ":arm_linux_all_files",
+    objcopy_files = ":arm_linux_all_files",
+    strip_files = ":arm_linux_all_files",
+    supports_param_files = 1,
+)
+
+cc_toolchain(
+    name = "cc-compiler-local",
+    toolchain_config = ":yocto_local_toolchain_config",
+    toolchain_identifier = "yocto_toolchain_config_local",
+    all_files = ":empty",
+    compiler_files = ":empty",
+    dwp_files = ":empty",
+    linker_files = ":empty",
+    objcopy_files = ":empty",
+    strip_files = ":empty",
+    supports_param_files = 1,
+)
diff --git a/third_party/toolchains/yocto/cc_toolchain_config.bzl b/third_party/toolchains/yocto/cc_toolchain_config.bzl
new file mode 100644
index 0000000..90cff09
--- /dev/null
+++ b/third_party/toolchains/yocto/cc_toolchain_config.bzl
@@ -0,0 +1,619 @@
+load("@bazel_tools//tools/cpp:cc_toolchain_config_lib.bzl",
+     "feature",
+     "flag_group",
+     "flag_set",
+     "with_feature_set",
+     "tool_path")
+load("@bazel_tools//tools/build_defs/cc:action_names.bzl", "ACTION_NAMES")
+
+def _impl(ctx):
+
+    all_link_actions = [
+        ACTION_NAMES.cpp_link_executable,
+        ACTION_NAMES.cpp_link_dynamic_library,
+        ACTION_NAMES.cpp_link_nodeps_dynamic_library,
+    ]
+
+    all_compile_actions = [
+        ACTION_NAMES.assemble,
+        ACTION_NAMES.preprocess_assemble,
+        ACTION_NAMES.linkstamp_compile,
+        ACTION_NAMES.c_compile,
+        ACTION_NAMES.cpp_compile,
+        ACTION_NAMES.cpp_header_parsing,
+        ACTION_NAMES.cpp_module_compile,
+        ACTION_NAMES.cpp_module_codegen,
+        ACTION_NAMES.lto_backend,
+        ACTION_NAMES.clif_match,
+    ]
+
+    # System level defintions
+    if (ctx.attr.cpu == "armeabi-v7a-a15"):
+        toolchain_identifier = "yocto_toolchain_config_armeabi-v7a-a15"
+        target_system_name = "armeabi-v7a-a15"
+        host_system_name = "armeabi-v7a-a15"
+        target_cpu = "armeabi-v7a-a15"
+        target_libc = "armeabi-v7a-a15"
+        abi_version = "armeabi-v7a-a15"
+        abi_libc_version = "armeabi-v7a-a15"
+
+    elif (ctx.attr.cpu == "armeabi-v7a-a7"):
+        toolchain_identifier = "yocto_toolchain_config_armeabi-v7a-a7"
+        target_system_name = "armeabi-v7a-a7"
+        host_system_name = "armeabi-v7a-a7"
+        target_cpu = "armeabi-v7a-a7"
+        target_libc = "armeabi-v7a-a7"
+        abi_version = "armeabi-v7a-a7"
+        abi_libc_version = "armeabi-v7a-a7"
+    
+    elif (ctx.attr.cpu == "armeabi-v7a-a7-a15"):
+        toolchain_identifier = "yocto_toolchain_config_armeabi-v7a-a7-a15"
+        target_system_name = "armeabi-v7a-a7-a15"
+        host_system_name = "armeabi-v7a-a7-a15"
+        target_cpu = "armeabi-v7a-a7-a15"
+        target_libc = "armeabi-v7a-a7-a15"
+        abi_version = "armeabi-v7a-a7-a15"
+        abi_libc_version = "armeabi-v7a-a7-a15"
+
+    elif (ctx.attr.cpu == "arm64-v8a-a53"):
+        toolchain_identifier = "yocto_toolchain_config_arm64-v8a-a53"
+        target_system_name = "arm64-v8a-a53"
+        host_system_name = "arm64-v8a-a53"
+        target_cpu = "arm64-v8a-a53"
+        target_libc = "arm64-v8a-a53"
+        abi_version = "arm64-v8a-a53"
+        abi_libc_version = "arm64-v8a-a53"
+
+    elif (ctx.attr.cpu == "arm64-v8a-a57"):
+        toolchain_identifier = "yocto_toolchain_config_arm64-v8a-a57"
+        target_system_name = "arm64-v8a-a57"
+        host_system_name = "arm64-v8a-a57"
+        target_cpu = "arm64-v8a-a57"
+        target_libc = "arm64-v8a-a57"
+        abi_version = "arm64-v8a-a57"
+        abi_libc_version = "arm64-v8a-a57"
+
+    elif (ctx.attr.cpu == "arm64-v8a-a57-a53"):
+        toolchain_identifier = "yocto_toolchain_config_arm64-v8a-a57-a53"
+        target_system_name = "arm64-v8a-a57-a53"
+        host_system_name = "arm64-v8a-a57-a53"
+        target_cpu = "arm64-v8a-a57-a53"
+        target_libc = "arm64-v8a-a57-a53"
+        abi_version = "arm64-v8a-a57-a53"
+        abi_libc_version = "arm64-v8a-a57-a53"
+
+    elif (ctx.attr.cpu == "local"):
+        toolchain_identifier = "yocto_toolchain_config_local"
+        target_system_name = "local"
+        host_system_name = "local"
+        target_cpu = "local"
+        target_libc = "local"
+        abi_version = "local"
+        abi_libc_version = "local"
+    
+    else:
+        fail("Yocto/Bazel System Level Defintions - Could not find CPU defintion")
+
+
+    # Common defintions between targets
+    if (ctx.attr.cpu == "armeabi-v7a-a15" or 
+        ctx.attr.cpu == "armeabi-v7a-a7" or 
+        ctx.attr.cpu == "armeabi-v7a-a7-a15" or 
+        ctx.attr.cpu == "arm64-v8a-a53" or 
+        ctx.attr.cpu == "arm64-v8a-a57" or 
+        ctx.attr.cpu == "arm64-v8a-a57-a53"):
+        cxx_builtin_include_directories = [
+            "%%CT_STAGING_DIR%%/",
+            "%%CT_STAGING_DIR%%/usr/lib64/",
+            "%%CT_STAGING_DIR%%/usr/lib64/gcc/",
+            "%%CT_STAGING_DIR%%/usr/lib64/gcc/%%CT_NAME%%/",
+            "%%CT_STAGING_DIR%%/usr/include/",
+            "%%CT_STAGING_DIR%%/usr/include/linux",
+            "%%CT_ROOT_DIR%%/usr/include",
+            "%%CT_ROOT_DIR%%/usr/lib/%%CT_NAME%%/",
+            "%%CT_ROOT_DIR%%/usr/lib/%%CT_NAME%%/gcc/",
+            "%%CT_ROOT_DIR%%/usr/libexec/%%CT_NAME%%/",
+            "%%CT_STAGING_DIR%%/usr/include/c++/%%CT_GCC_VERSION%%",
+            "%%CT_STAGING_DIR%%/usr/include/c++/%%CT_GCC_VERSION%%/profile",
+        ]
+
+        tool_paths = [
+            tool_path(
+                name = "gcc",
+                path = "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-gcc",
+            ),
+            tool_path(
+                name = "ld",
+                path = "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-ld",
+            ),
+            tool_path(
+                name = "compat-ld",
+                path = "/bin/false",
+            ),
+            tool_path(
+                name = "ar",
+                path = "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-ar",
+            ),
+            tool_path(
+                name = "cpp",
+                path = "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-cpp",
+            ),
+            tool_path(
+                name = "gcov",
+                path = "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-gcov",
+            ),
+            tool_path(
+                name = "nm",
+                path = "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-nm",
+            ),
+            tool_path(
+                name = "objdump",
+                path = "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-objdump",
+            ),
+            tool_path(
+                name = "strip",
+                path = "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-strip",
+            ),
+            tool_path(
+                name = "dwp",
+                path = "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-dwp",
+            ),
+            tool_path(
+    	        name = "objcopy",
+                path = "%%CT_ROOT_DIR%%/usr/bin/%%CT_NAME%%/%%CT_NAME%%-objcopy",
+    	    ),
+        ]
+    elif (ctx.attr.cpu == "local"):
+        cxx_builtin_include_directories = [
+            "/usr/lib/gcc/",
+            "/usr/local/include",
+            "/usr/include",
+        ]
+        tool_paths = [
+            tool_path(
+                name = "gcc",
+                path = "/usr/bin/gcc",
+            ),
+            tool_path(
+                name = "ld",
+                path = "/usr/bin/ld",
+            ),
+            tool_path(
+                name = "compat-ld",
+                path = "/usr/bin/ld",
+            ),
+            tool_path(
+                name = "ar",
+                path = "/usr/bin/ar",
+            ),
+            tool_path(
+                name = "cpp",
+                path = "/usr/bin/cpp",
+            ),
+            tool_path(
+                name = "gcov",
+                path = "/usr/bin/gcov",
+            ),
+            tool_path(
+                name = "nm",
+                path = "/usr/bin/nm",
+            ),
+            tool_path(
+                name = "objdump",
+                path = "/usr/bin/objdump",
+            ),
+            tool_path(
+                name = "strip",
+                path = "/usr/bin/strip",
+            ),
+            tool_path(
+                name = "dwp",
+                path = "/usr/bin/dwp",
+            ),
+            tool_path(
+                name = "objcopy",
+                path = "/usr/bin/objcopy",
+       	    ),
+        ] 
+    else:
+        fail("Yocto/Bazel Common Target Defintions - Could not find CPU defintion")
+
+    # Compilation Flags
+    if (ctx.attr.cpu == "armeabi-v7a-a7"):
+        default_compile_flags_feature = feature(
+            name = "default_compile_flags",
+            enabled = True,
+            flag_sets = [
+               flag_set(
+                    actions = all_compile_actions,
+                    flag_groups = [
+                        flag_group(
+                            flags = [
+                                "-U_FORTIFY_SOURCE",
+                                "-D_GLIBCXX_USE_CXX11_ABI=1",
+                                "-fstack-protector",
+                                "-fno-canonical-system-headers",
+                                "--sysroot=%%CT_STAGING_DIR%%",
+                                "-march=armv7-a",
+                                "-mfloat-abi=hard",
+                                "-mfpu=neon-vfpv4",
+                                "-mtune=cortex-a7",
+                                "-funsafe-math-optimizations",
+                                "-ftree-vectorize",
+                                "-fomit-frame-pointer",
+                                "-Wall",
+                                "-g0",
+                                "-O2",
+                                "-fPIC",
+                                "-DNDEBUG",
+                                "-ffunction-sections",
+                                "-fdata-sections",
+                                "-Wno-builtin-macro-redefined",
+                                "-DARM_NON_MOBILE",
+                                "-D__DATE__=\"redacted\"",
+                                "-D__TIMESTAMP__=\"redacted\"",
+                                "-D__TIME__=\"redacted\"",
+                          ],
+                       ),
+                   ],
+               ),
+            ],
+        )
+    elif (ctx.attr.cpu == "armeabi-v7a-a15"):
+        default_compile_flags_feature = feature(
+            name = "default_compile_flags",
+            enabled = True,
+            flag_sets = [
+               flag_set(
+                    actions = all_compile_actions,
+                    flag_groups = [
+                        flag_group(
+                            flags = [
+                                "-U_FORTIFY_SOURCE",
+                                "-D_GLIBCXX_USE_CXX11_ABI=1",
+                                "-fstack-protector",
+                                "-fno-canonical-system-headers",
+                                "--sysroot=%%CT_STAGING_DIR%%",
+                                "-march=armv7-a",
+                                "-mfloat-abi=hard",
+                                "-mfpu=neon-vfpv4",
+                                "-mtune=cortex-a15",
+                                "-funsafe-math-optimizations",
+                                "-ftree-vectorize",
+                                "-fomit-frame-pointer",
+                                "-Wall",
+                                "-g0",
+                                "-O2",
+                                "-fPIC",
+                                "-DNDEBUG",
+                                "-ffunction-sections",
+                                "-fdata-sections",
+                                "-Wno-builtin-macro-redefined",
+                                "-DARM_NON_MOBILE",
+                                "-D__DATE__=\"redacted\"",
+                                "-D__TIMESTAMP__=\"redacted\"",
+                                "-D__TIME__=\"redacted\"",
+                          ],
+                       ),
+                   ],
+               ),
+            ],
+        )
+    elif (ctx.attr.cpu == "armeabi-v7a-a7-a15"):
+        default_compile_flags_feature = feature(
+            name = "default_compile_flags",
+            enabled = True,
+            flag_sets = [
+               flag_set(
+                    actions = all_compile_actions,
+                    flag_groups = [
+                        flag_group(
+                            flags = [
+                                "-U_FORTIFY_SOURCE",
+                                "-D_GLIBCXX_USE_CXX11_ABI=1",
+                                "-fstack-protector",
+                                "-fno-canonical-system-headers",
+                                "--sysroot=%%CT_STAGING_DIR%%",
+                                "-march=armv7-a",
+                                "-mfloat-abi=hard",
+                                "-mfpu=neon-vfpv4",
+                                "-mtune=cortex-a15.cortex-a7",
+                                "-funsafe-math-optimizations",
+                                "-ftree-vectorize",
+                                "-fomit-frame-pointer",
+                                "-Wall",
+                                "-g0",
+                                "-O2",
+                                "-fPIC",
+                                "-DNDEBUG",
+                                "-ffunction-sections",
+                                "-fdata-sections",
+                                "-Wno-builtin-macro-redefined",
+                                "-DARM_NON_MOBILE",
+                                "-D__DATE__=\"redacted\"",
+                                "-D__TIMESTAMP__=\"redacted\"",
+                                "-D__TIME__=\"redacted\"",
+                          ],
+                       ),
+                   ],
+               ),
+            ],
+        )
+    elif (ctx.attr.cpu == "arm64-v8a-a53"):
+        default_compile_flags_feature = feature(
+            name = "default_compile_flags",
+            enabled = True,
+            flag_sets = [
+               flag_set(
+                    actions = all_compile_actions,
+                    flag_groups = [
+                        flag_group(
+                            flags = [
+                                "-U_FORTIFY_SOURCE",
+                                "-D_GLIBCXX_USE_CXX11_ABI=1",
+                                "-fstack-protector",
+                                "-fno-canonical-system-headers",
+                                "--sysroot=%%CT_STAGING_DIR%%",
+                                "-march=armv8-a",
+                                "-mtune=cortex-a53",
+                                "-funsafe-math-optimizations",
+                                "-ftree-vectorize",
+                                "-fomit-frame-pointer",
+                                "-Wall",
+                                "-g0",
+                                "-O2",
+                                "-fPIC",
+                                "-DNDEBUG",
+                                "-ffunction-sections",
+                                "-fdata-sections",
+                                "-Wno-builtin-macro-redefined",
+                                "-DARM_NON_MOBILE",
+                                "-D__DATE__=\"redacted\"",
+                                "-D__TIMESTAMP__=\"redacted\"",
+                                "-D__TIME__=\"redacted\"",
+                          ],
+                       ),
+                   ],
+               ),
+            ],
+        )
+    elif (ctx.attr.cpu == "arm64-v8a-a57"):
+        default_compile_flags_feature = feature(
+            name = "default_compile_flags",
+            enabled = True,
+            flag_sets = [
+               flag_set(
+                    actions = all_compile_actions,
+                    flag_groups = [
+                        flag_group(
+                            flags = [
+                                "-U_FORTIFY_SOURCE",
+                                "-D_GLIBCXX_USE_CXX11_ABI=1",
+                                "-fstack-protector",
+                                "-fno-canonical-system-headers",
+                                "--sysroot=%%CT_STAGING_DIR%%",
+                                "-march=armv8-a",
+                                "-mtune=cortex-a57",
+                                "-funsafe-math-optimizations",
+                                "-ftree-vectorize",
+                                "-fomit-frame-pointer",
+                                "-Wall",
+                                "-g0",
+                                "-O2",
+                                "-fPIC",
+                                "-DNDEBUG",
+                                "-ffunction-sections",
+                                "-fdata-sections",
+                                "-Wno-builtin-macro-redefined",
+                                "-DARM_NON_MOBILE",
+                                "-D__DATE__=\"redacted\"",
+                                "-D__TIMESTAMP__=\"redacted\"",
+                                "-D__TIME__=\"redacted\"",
+                          ],
+                       ),
+                   ],
+               ),
+            ],
+        )
+    elif (ctx.attr.cpu == "arm64-v8a-a57-a53"):
+        default_compile_flags_feature = feature(
+            name = "default_compile_flags",
+            enabled = True,
+            flag_sets = [
+               flag_set(
+                    actions = all_compile_actions,
+                    flag_groups = [
+                        flag_group(
+                            flags = [
+                                "-U_FORTIFY_SOURCE",
+                                "-D_GLIBCXX_USE_CXX11_ABI=1",
+                                "-fstack-protector",
+                                "-fno-canonical-system-headers",
+                                "--sysroot=%%CT_STAGING_DIR%%",
+                                "-march=armv8-a",
+                                "-mtune=cortex-a57.cortex-a53",
+                                "-funsafe-math-optimizations",
+                                "-ftree-vectorize",
+                                "-fomit-frame-pointer",
+                                "-Wall",
+                                "-g0",
+                                "-O2",
+                                "-fPIC",
+                                "-DNDEBUG",
+                                "-ffunction-sections",
+                                "-fdata-sections",
+                                "-Wno-builtin-macro-redefined",
+                                "-DARM_NON_MOBILE",
+                                "-D__DATE__=\"redacted\"",
+                                "-D__TIMESTAMP__=\"redacted\"",
+                                "-D__TIME__=\"redacted\"",
+                          ],
+                       ),
+                   ],
+               ),
+            ],
+        )
+    elif (ctx.attr.cpu == "local"):
+        default_compile_flags_feature = feature(
+            name = "default_compile_flags",
+            enabled = True,
+            flag_sets = [
+               flag_set(
+                    actions = all_compile_actions,
+                    flag_groups = [
+                        flag_group(
+                            flags = [
+                                "-U_FORTIFY_SOURCE",
+                                "-D_GLIBCXX_USE_CXX11_ABI=1",
+                                "-fstack-protector",
+                                "-no-canonical-prefixes",
+                                "-fno-canonical-system-headers",
+                                "-Wno-builtin-macro-redefined",
+                                "-funsafe-math-optimizations",
+                                "-ftree-vectorize",
+                                "-fomit-frame-pointer",
+                                "-DARM_NON_MOBILE",
+                                "-Wall",
+                                "-g0",
+                                "-O2",
+                                "-DNDEBUG",
+                                "-ffunction-sections",
+                                "-fdata-sections",
+                                "-D_PYTHON_INCLUDE_NATIVE",
+                                "-Wunused-but-set-parameter",
+                                "-Wno-free-nonheap-object",
+                                "-fno-omit-frame-pointer",
+                            ],
+                        ),
+                    ],
+                ),
+            ],
+        )
+    else:
+        fail("Yocto/Bazel Compiler Flags - Could not find CPU defintion")
+
+    # Linker Flags
+    if (ctx.attr.cpu == "armeabi-v7a-a15" or 
+        ctx.attr.cpu == "armeabi-v7a-a7" or 
+        ctx.attr.cpu == "armeabi-v7a-a7-a15" ): 
+        default_link_flags_feature = feature(
+            name = "default_link_flags",
+            enabled = True,
+            flag_sets = [
+                flag_set(
+                    actions = all_link_actions,
+                    flag_groups = [
+                        flag_group(
+                            flags = [
+                                "-Wl,-z,relro,-z,now",
+                                "-no-canonical-prefixes",
+                                "-Wno-builtin-macro-redefined",
+                                "-pass-exit-codes",
+                                "-Wl,--build-id=md5",
+                                "-Wl,--hash-style=gnu",
+                                "-fPIC",
+                                "--sysroot=%%CT_STAGING_DIR%%",
+                                "-Wl,--dynamic-linker=/lib/ld-linux-armhf.so.3",
+                                "-Wl,--gc-sections",
+                                "-lstdc++",
+                            ],
+                        ),
+                    ],
+                ),
+                flag_set(
+                    actions = all_link_actions,
+                    flag_groups = [flag_group(flags = ["-Wl,--gc-sections"])],
+                    with_features = [with_feature_set(features = ["opt"])],
+                ),
+            ],
+        )
+    elif (ctx.attr.cpu == "arm64-v8a-a53" or 
+          ctx.attr.cpu == "arm64-v8a-a57" or 
+          ctx.attr.cpu == "arm64-v8a-a57-a53"):
+        default_link_flags_feature = feature(
+            name = "default_link_flags",
+            enabled = True,
+            flag_sets = [
+                flag_set(
+                    actions = all_link_actions,
+                    flag_groups = [
+                        flag_group(
+                            flags = [
+                                "-Wl,-z,relro,-z,now",
+                                "-no-canonical-prefixes",
+                                "-Wno-builtin-macro-redefined",
+                                "-pass-exit-codes",
+                                "-Wl,--build-id=md5",
+                                "-Wl,--hash-style=gnu",
+                                "-fPIC",
+                                "--sysroot=%%CT_STAGING_DIR%%",
+                                "-Wl,--dynamic-linker=/lib/ld-linux-aarch64.so.1",
+                                "-Wl,--gc-sections",
+                                "-lstdc++",
+                            ],
+                        ),
+                    ],
+                ),
+                flag_set(
+                    actions = all_link_actions,
+                    flag_groups = [flag_group(flags = ["-Wl,--gc-sections"])],
+                    with_features = [with_feature_set(features = ["opt"])],
+                ),
+            ],
+        )
+    elif (ctx.attr.cpu == "local"):
+        default_link_flags_feature = feature(
+            name = "default_link_flags",
+            enabled = True,
+            flag_sets = [
+                flag_set(
+                    actions = all_link_actions,
+                    flag_groups = [
+                        flag_group(
+                            flags = [
+                                "-Wl,-z,relro,-z,now",
+                                "-no-canonical-prefixes",
+                                "-fno-canonical-system-headers",
+                                "-Wno-builtin-macro-redefined",
+                                "-pass-exit-codes",
+                                "-Wl,--build-id=md5",
+                                "-Wl,--hash-style=gnu",
+                                "-Wl,--gc-sections",
+                                "-lstdc++",
+                                "-B/usr/bin/",
+                            ],
+                        ),
+                    ],
+                ),
+                flag_set(
+                    actions = all_link_actions,
+                    flag_groups = [flag_group(flags = ["-Wl,--gc-sections"])],
+                    with_features = [with_feature_set(features = ["opt"])],
+                ),
+            ],
+        )
+    else:
+        fail("Yocto/Bazel Linker Flags - Could not find cpu defintion")
+
+    return cc_common.create_cc_toolchain_config_info(
+        ctx = ctx,
+        cxx_builtin_include_directories = cxx_builtin_include_directories,
+        target_system_name = target_system_name,
+        target_cpu = target_cpu,
+        host_system_name = host_system_name,
+        target_libc = target_libc,
+        toolchain_identifier = toolchain_identifier,
+        compiler = "compiler",
+        abi_version = abi_version,
+        abi_libc_version = abi_libc_version,
+        tool_paths = tool_paths,
+        features = [default_link_flags_feature, default_compile_flags_feature],
+    )
+
+cc_toolchain_config = rule(
+    implementation = _impl,
+    attrs = {
+        "cpu": attr.string(mandatory=True, values=["armeabi-v7a-a15", "armeabi-v7a-a7", "armeabi-v7a-a7-a15", "arm64-v8a-a53", "arm64-v8a-a57", "arm64-v8a-a57-a53", "local"]),
+    },
+    provides = [CcToolchainConfigInfo],
+)
diff --git a/third_party/toolchains/yocto/yocto_compiler.BUILD b/third_party/toolchains/yocto/yocto_compiler.BUILD
new file mode 100644
index 0000000..17f78fa
--- /dev/null
+++ b/third_party/toolchains/yocto/yocto_compiler.BUILD
@@ -0,0 +1,70 @@
+package(default_visibility = ['//visibility:public'])
+
+filegroup(
+  name = 'gcc',
+  srcs = [
+    'recipe-sysroot-native/usr/bin/%%CT_NAME%%/%%CT_NAME%%-gcc',
+  ],
+)
+
+filegroup(
+  name = 'ar',
+  srcs = [
+    'recipe-sysroot-native/usr/bin/%%CT_NAME%%/%%CT_NAME%%-ar',
+  ],
+)
+
+filegroup(
+  name = 'ld',
+  srcs = [
+    'recipe-sysroot-native/usr/bin/%%CT_NAME%%/%%CT_NAME%%-ld',
+  ],
+)
+
+filegroup(
+  name = 'nm',
+  srcs = [
+    'recipe-sysroot-native/usr/bin/%%CT_NAME%%/%%CT_NAME%%-nm',
+  ],
+)
+
+filegroup(
+  name = 'objcopy',
+  srcs = [
+    'recipe-sysroot-native/usr/bin/%%CT_NAME%%/%%CT_NAME%%-objcopy',
+  ],
+)
+
+filegroup(
+  name = 'objdump',
+  srcs = [
+    'recipe-sysroot-native/usr/bin/%%CT_NAME%%/%%CT_NAME%%-objdump',
+  ],
+)
+
+filegroup(
+  name = 'strip',
+  srcs = [
+    'recipe-sysroot-native/usr/bin/%%CT_NAME%%/%%CT_NAME%%-strip',
+  ],
+)
+
+filegroup(
+  name = 'as',
+  srcs = [
+    'recipe-sysroot-native/usr/bin/%%CT_NAME%%/%%CT_NAME%%-as',
+  ],
+)
+
+filegroup(
+  name = 'compiler_pieces',
+  srcs = glob([
+    'recipe-sysroot-native/usr/include/**',
+    'recipe-sysroot-native/usr/lib/%%CT_NAME%%/**',
+    'recipe-sysroot-native/usr/lib/%%CT_NAME%%/gcc/**',
+    'recipe-sysroot-native/usr/lib64/%%CT_NAME%%/**',
+    'recipe-sysroot-native/usr/lib64/%%CT_NAME%%/gcc/**',
+    'recipe-sysroot-native/usr/libexec/%%CT_NAME%%/**',
+    'recipe-sysroot/usr/include/**',
+  ]),
+)
diff --git a/third_party/toolchains/yocto/yocto_compiler_configure.bzl b/third_party/toolchains/yocto/yocto_compiler_configure.bzl
new file mode 100644
index 0000000..19c7cd1
--- /dev/null
+++ b/third_party/toolchains/yocto/yocto_compiler_configure.bzl
@@ -0,0 +1,24 @@
+# -*- Python -*-
+"""Yocto rule for yocto compiler autoconfiguration."""
+
+def _tpl(repository_ctx, tpl, substitutions={}, out=None):
+  if not out:
+    out = tpl
+  repository_ctx.template(
+      out,
+      Label("//third_party/toolchains/yocto:%s.tpl" % tpl),
+      substitutions)
+
+
+def _yocto_compiler_configure_impl(repository_ctx):
+  _tpl(repository_ctx, "CROSSTOOL")
+  repository_ctx.symlink(repository_ctx.attr.build_file, "BUILD")
+
+
+yocto_compiler_configure = repository_rule(
+    implementation = _yocto_compiler_configure_impl,
+    attrs = {
+        "remote_config_repo": attr.string(mandatory = False, default =""),
+        "build_file": attr.label(),
+    },
+)
-- 
2.7.4

